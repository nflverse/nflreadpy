{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nflreadpy","text":"<p>A Python package for downloading NFL data from nflverse repositories. This is a Python port of the popular R package nflreadr, designed to provide easy access to NFL data with caching, progress tracking, and modern Python conventions.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Compatible API with nflreadr R package</li> <li>Fast data loading with Polars DataFrames</li> <li>Intelligent caching (memory or filesystem)</li> <li>Progress tracking for large downloads</li> </ul>"},{"location":"#install","title":"Install","text":"<pre><code># Using uv (recommended)\nuv add nflreadpy\n\n# Using pip\npip install nflreadpy\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import nflreadpy as nfl\n\n# Load current season play-by-play data\npbp = nfl.load_pbp()\n\n# Load player game-level stats for multiple seasons\nplayer_stats = nfl.load_player_stats([2022, 2023])\n\n# Load all available team level stats\nteam_stats = nfl.load_team_stats(seasons=True)\n\n# nflreadpy uses Polars instead of pandas. Convert to pandas if needed:\npbp_pandas = pbp.to_pandas()\n</code></pre>"},{"location":"#available-functions","title":"Available Functions","text":"<p>Reference page for all load functions</p>"},{"location":"#configuration","title":"Configuration","text":"<p>Reference page for config options</p>"},{"location":"#getting-help","title":"Getting help","text":"<p>The best places to get help on this package are:</p> <ul> <li>the nflverse discord (for   both this package as well as anything NFL analytics related)</li> <li>opening an issue</li> </ul>"},{"location":"#data-sources","title":"Data Sources","text":"<p>nflreadpy downloads data from the following nflverse repositories:</p> <ul> <li>nflverse-data - Play-by-play, rosters, stats</li> <li>dynastyprocess - fantasy football data</li> <li>ffopportunity - expected yards and fantasy points</li> </ul> <p>See the automation status page here for last update date/times for each release.</p>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE file for details.</p> <p>The majority of all nflverse data available (ie all but the FTN data as of July 2025) is broadly licensed as CC-BY 4.0, and the FTN data is CC-BY-SA 4.0 (see nflreadr docs for each main data file).</p>"},{"location":"#development","title":"Development","text":"<p>This project uses the following tooling:</p> <ul> <li>uv for dependency management</li> <li>ruff for linting and formatting</li> <li>mypy for type checking</li> <li>pytest for testing</li> <li>mkdocs for website docs</li> </ul> <pre><code># Install development dependencies\nuv sync --dev\n\n# Run tests\nuv run pytest\n\n# Format code\nuv run ruff format\n\n# Type check\nuv run mypy src\n\n# Serve docs site locally\nuv run mkdocs serve\n</code></pre>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Most of the first version was written by Claude based on nflreadr, use at your own risk.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Many hands make light work! Here are some ways you can contribute to this project:</p> <ul> <li> <p>You can open an issue if you'd like to request a feature or report a bug/error.</p> </li> <li> <p>If you'd like to contribute code, please check out the contribution guidelines.</p> </li> </ul>"},{"location":"CHANGELOG/","title":"nflreadpy v0.1.4","text":"<p>Release date: 2025-10-19</p> <p>Changes:</p> <ul> <li>load_teams() now points to nflverse-data@teams for compat with nflreadr (breaking change)</li> <li>load_schedules() now points to nflverse-data@schedules to access parquet version of file</li> <li>load_trades() now points to nflverse-data@trades to access parquet version of file</li> </ul>"},{"location":"CHANGELOG/#nflreadpy-v013","title":"nflreadpy v0.1.3","text":"<p>Release date: 2025-09-20</p> <p>Minor tweaks:</p> <ul> <li>config defaults to verbose = FALSE</li> <li>load_nextgen_stats() argument order updated for consistency</li> <li>summary_level arg in stats functions now a Literal type instead of a plain string</li> </ul>"},{"location":"CHANGELOG/#nflreadpy-v012","title":"nflreadpy v0.1.2","text":"<p>Release date: 2025-09-15</p> <p>First version of nflreadpy, a port of nflreadr and a successor to nfl_data_py, with the goal of starting fresh and maintaining API compatibility with nflreadr so that it's easier for nflverse maintainers to keep it in parallel with nflreadr updates. This first version was mostly written with the help of Claude Code.</p>"},{"location":"CHANGELOG/#new-functions","title":"New functions","text":"<p>The following functions are included in this release:</p> <ul> <li>load_pbp() - play-by-play data</li> <li>load_player_stats() - player game or season statistics</li> <li>load_team_stats() - team game or season statistics</li> <li>load_schedules() - game schedules and results</li> <li>load_players() - player information</li> <li>load_rosters() - team rosters</li> <li>load_rosters_weekly() - team rosters by season-week</li> <li>load_snap_counts() - snap counts</li> <li>load_nextgen_stats() - advanced stats from nextgenstats.nfl.com</li> <li>load_ftn_charting() - charted stats from ftnfantasy.com/data</li> <li>load_participation() - participation data (historical)</li> <li>load_draft_picks() - nfl draft picks</li> <li>load_injuries() - injury statuses and practice participation</li> <li>load_contracts() - historical contract data from OTC</li> <li>load_officials() - officials for each game</li> <li>load_combine() - nfl combine results</li> <li>load_depth_charts() - depth charts</li> <li>load_trades() - trades</li> <li>load_ff_playerids() - ffverse/dynastyprocess player ids</li> <li>load_ff_rankings() - fantasypros rankings</li> <li>load_ff_opportunity() - expected yards, touchdowns, and fantasy points</li> <li>clear_cache() - Clear cached data</li> <li>get_current_season() - Get current NFL season</li> <li>get_current_week() - Get current NFL week</li> </ul>"},{"location":"CHANGELOG/#feature-comparisons","title":"Feature comparisons","text":"<ul> <li>feature comparison with nflreadr</li> <li>feature comparison with nfl_data_py</li> </ul>"},{"location":"CHANGELOG/#acknowledgements","title":"Acknowledgements","text":"<p>Thanks to @mrcaseb, @guga31bb, @guidopetri, and @akeaswaran for reviewing the code in this release, and to @alecglen and @cooperdff for their stewardship of the nfl_data_py package.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Many hands make light work! Here are some ways you can contribute to this project:</p>"},{"location":"CONTRIBUTING/#open-an-issue","title":"Open an issue","text":"<ul> <li>You can open an issue if you'd like to request a specific function or report a bug/error.</li> </ul>"},{"location":"CONTRIBUTING/#fixing-typos","title":"Fixing typos","text":"<ul> <li>You can fix typos, spelling mistakes, or grammatical errors in the documentation directly using the GitHub web interface, as long as the changes are made in the source file.</li> </ul>"},{"location":"CONTRIBUTING/#bigger-changes","title":"Bigger changes","text":"<ul> <li> <p>If you want to make a bigger change, it's a good idea to first file an issue and make sure someone from the team agrees that it\u2019s needed. If you\u2019ve found a bug, please file an issue that illustrates the bug with a minimal reprex (this will also help you write a unit test, if needed).</p> </li> <li> <p>You can also bring up changes in the nflverse discord and our team will be happy to discuss!</p> </li> </ul>"},{"location":"CONTRIBUTING/#tooling-and-code-practices","title":"Tooling and Code Practices","text":"<p>This project uses the following tooling:</p> <ul> <li>uv for dependency management</li> <li>ruff for linting and formatting</li> <li>mypy for type checking</li> <li>pytest for testing</li> <li>mkdocs for documentation site</li> </ul> <pre><code># Install development dependencies\nuv sync --dev\n\n# Run tests\nuv run pytest\n\n# Format code\nuv run ruff format\n\n# Type check\nuv run mypy src\n\n# Serve docs site locally\nuv run mkdocs serve\n\n# Build docs site\nuv run mkdocs build\n</code></pre>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that the nflverse project is released with a Contributor Code of Conduct. By contributing to this project you agree to abide by its terms.</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2025 nflreadpy contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/cache/","title":"Cache Management","text":""},{"location":"api/cache/#nflreadpy.clear_cache","title":"nflreadpy.clear_cache","text":"<pre><code>clear_cache(pattern: str | None = None) -&gt; None\n</code></pre> <p>Clear cached data entries matching a pattern.</p> <p>This is the main function for clearing nflreadpy's cache. It provides a simple interface to the underlying CacheManager functionality.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str | None</code> <p>Optional string pattern to match against cached data.    If None, clears all cached data. Pattern matching is performed    on cache keys, which typically contain URLs and parameters.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import nflreadpy as nfl\n&gt;&gt;&gt; nfl.clear_cache()  # Clear all cached data\n&gt;&gt;&gt; nfl.clear_cache(\"pbp_2023\")  # Clear 2023 play-by-play data\n&gt;&gt;&gt; nfl.clear_cache(\"roster\")  # Clear all roster data\n</code></pre> Note <p>This affects both memory and filesystem cache depending on your cache configuration. See nflreadpy.config for cache settings.</p> See Also <p>nflreadr clear_cache reference</p> Source code in <code>src/nflreadpy/cache.py</code> <pre><code>def clear_cache(pattern: str | None = None) -&gt; None:\n    \"\"\"Clear cached data entries matching a pattern.\n\n    This is the main function for clearing nflreadpy's cache. It provides a simple\n    interface to the underlying CacheManager functionality.\n\n    Args:\n        pattern: Optional string pattern to match against cached data.\n               If None, clears all cached data. Pattern matching is performed\n               on cache keys, which typically contain URLs and parameters.\n\n    Examples:\n        &gt;&gt;&gt; import nflreadpy as nfl\n        &gt;&gt;&gt; nfl.clear_cache()  # Clear all cached data\n        &gt;&gt;&gt; nfl.clear_cache(\"pbp_2023\")  # Clear 2023 play-by-play data\n        &gt;&gt;&gt; nfl.clear_cache(\"roster\")  # Clear all roster data\n\n    Note:\n        This affects both memory and filesystem cache depending on your\n        cache configuration. See nflreadpy.config for cache settings.\n\n    See Also:\n        [nflreadr clear_cache reference](https://nflreadr.nflverse.com/reference/clear_cache.html)\n    \"\"\"\n    _cache_manager.clear(pattern)\n</code></pre>"},{"location":"api/configuration/","title":"Configuration","text":""},{"location":"api/configuration/#nflreadpy.config.NflreadpyConfig","title":"nflreadpy.config.NflreadpyConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Configuration settings for nflreadpy.</p> <p>This class manages all configuration options for the nflreadpy package. Settings can be configured via environment variables or programmatically.</p> Environment Variables <ul> <li>NFLREADPY_CACHE: Cache mode (\"memory\", \"filesystem\", or \"off\")</li> <li>NFLREADPY_CACHE_DIR: Directory path for filesystem cache</li> <li>NFLREADPY_CACHE_DURATION: Cache duration in seconds</li> <li>NFLREADPY_VERBOSE: Enable verbose output (true/false)</li> <li>NFLREADPY_TIMEOUT: HTTP request timeout in seconds</li> <li>NFLREADPY_USER_AGENT: Custom user agent string</li> </ul> Example <pre><code>from nflreadpy.config import update_config, get_config\n\n# Update settings programmatically\nupdate_config(cache_mode=\"filesystem\", verbose=False)\n\n# Get current settings\nconfig = get_config()\nprint(f\"Cache mode: {config.cache_mode}\")\n</code></pre>"},{"location":"api/configuration/#nflreadpy.config.update_config","title":"nflreadpy.config.update_config","text":"<pre><code>update_config(**kwargs: Any) -&gt; None\n</code></pre> <p>Update configuration settings programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Configuration options to update. Valid options include:</p> <ul> <li>cache_mode: \"memory\", \"filesystem\", or \"off\"</li> <li>cache_dir: Path to cache directory (str or Path)</li> <li>cache_duration: Cache duration in seconds (int)</li> <li>verbose: Enable verbose output (bool)</li> <li>timeout: HTTP timeout in seconds (int)</li> <li>user_agent: Custom user agent string (str)</li> </ul> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an unknown configuration option is provided.</p> Example <pre><code># Enable filesystem caching with custom directory\nupdate_config(\n    cache_mode=\"filesystem\",\n    cache_dir=\"/path/to/my/cache\",\n    verbose=True\n)\n\n# Disable caching and increase timeout\nupdate_config(\n    cache_mode=\"off\"\n    timeout=60\n)\n</code></pre> Source code in <code>src/nflreadpy/config.py</code> <pre><code>def update_config(**kwargs: Any) -&gt; None:\n    \"\"\"Update configuration settings programmatically.\n\n    Args:\n        **kwargs: Configuration options to update. Valid options include:\n\n            - cache_mode: \"memory\", \"filesystem\", or \"off\"\n            - cache_dir: Path to cache directory (str or Path)\n            - cache_duration: Cache duration in seconds (int)\n            - verbose: Enable verbose output (bool)\n            - timeout: HTTP timeout in seconds (int)\n            - user_agent: Custom user agent string (str)\n\n    Raises:\n        ValueError: If an unknown configuration option is provided.\n\n    Example:\n        ```python\n        # Enable filesystem caching with custom directory\n        update_config(\n            cache_mode=\"filesystem\",\n            cache_dir=\"/path/to/my/cache\",\n            verbose=True\n        )\n\n        # Disable caching and increase timeout\n        update_config(\n            cache_mode=\"off\"\n            timeout=60\n        )\n        ```\n    \"\"\"\n    global config\n    for key, value in kwargs.items():\n        if hasattr(config, key):\n            setattr(config, key, value)\n        else:\n            raise ValueError(f\"Unknown configuration option: {key}\")\n</code></pre>"},{"location":"api/configuration/#nflreadpy.config.get_config","title":"nflreadpy.config.get_config","text":"<pre><code>get_config() -&gt; NflreadpyConfig\n</code></pre> <p>Get the current configuration instance.</p> <p>Returns:</p> Type Description <code>NflreadpyConfig</code> <p>The global configuration object containing all current settings.</p> Example <pre><code>config = get_config()\nprint(f\"Cache directory: {config.cache_dir}\")\nprint(f\"Verbose mode: {config.verbose}\")\n</code></pre> Source code in <code>src/nflreadpy/config.py</code> <pre><code>def get_config() -&gt; NflreadpyConfig:\n    \"\"\"Get the current configuration instance.\n\n    Returns:\n        The global configuration object containing all current settings.\n\n    Example:\n        ```python\n        config = get_config()\n        print(f\"Cache directory: {config.cache_dir}\")\n        print(f\"Verbose mode: {config.verbose}\")\n        ```\n    \"\"\"\n    return config\n</code></pre>"},{"location":"api/configuration/#nflreadpy.config.reset_config","title":"nflreadpy.config.reset_config","text":"<pre><code>reset_config() -&gt; None\n</code></pre> <p>Reset all configuration settings to their default values.</p> <p>This will restore all settings to their initial state, clearing any programmatic or environment variable overrides.</p> Example <pre><code># Make some changes\nupdate_config(cache_mode=\"off\", verbose=False)\n\n# Reset everything back to defaults\nreset_config()\n\n# Now cache_mode is \"memory\" and verbose is True again\n</code></pre> Source code in <code>src/nflreadpy/config.py</code> <pre><code>def reset_config() -&gt; None:\n    \"\"\"Reset all configuration settings to their default values.\n\n    This will restore all settings to their initial state, clearing any\n    programmatic or environment variable overrides.\n\n    Example:\n        ```python\n        # Make some changes\n        update_config(cache_mode=\"off\", verbose=False)\n\n        # Reset everything back to defaults\n        reset_config()\n\n        # Now cache_mode is \"memory\" and verbose is True again\n        ```\n    \"\"\"\n    global config\n    config = NflreadpyConfig()\n</code></pre>"},{"location":"api/load_functions/","title":"Load Functions","text":""},{"location":"api/load_functions/#nflreadpy.load_pbp","title":"nflreadpy.load_pbp","text":"<p>Load NFL play-by-play data.</p>"},{"location":"api/load_functions/#nflreadpy.load_pbp.load_pbp","title":"load_pbp","text":"<pre><code>load_pbp(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL play-by-play data.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 1999.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with play-by-play data.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_pbp.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_pbp.html</p> Source code in <code>src/nflreadpy/load_pbp.py</code> <pre><code>def load_pbp(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL play-by-play data.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 1999.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with play-by-play data.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_pbp.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_pbp.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (1999 to current)\n        current_season = get_current_season()\n        seasons = list(range(1999, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 1999 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 1999 and {current_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"pbp/play_by_play_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_player_stats","title":"nflreadpy.load_player_stats","text":"<pre><code>load_player_stats(\n    seasons: int | list[int] | bool | None = None,\n    summary_level: Literal[\n        \"week\", \"reg\", \"post\", \"reg+post\"\n    ] = \"week\",\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL player statistics.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data.     If int or list of ints, loads specified season(s).</p> <code>None</code> <code>summary_level</code> <code>Literal['week', 'reg', 'post', 'reg+post']</code> <p>Summary level (\"week\", \"reg\", \"post\", \"reg+post\").</p> <code>'week'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with player statistics.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_player_stats.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_player_stats.html</p> Source code in <code>src/nflreadpy/load_stats.py</code> <pre><code>def load_player_stats(\n    seasons: int | list[int] | bool | None = None,\n    summary_level: Literal[\"week\", \"reg\", \"post\", \"reg+post\"] = \"week\",\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL player statistics.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data.\n                If int or list of ints, loads specified season(s).\n        summary_level: Summary level (\"week\", \"reg\", \"post\", \"reg+post\").\n\n    Returns:\n        Polars DataFrame with player statistics.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_player_stats.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_player_stats.html&gt;\n    \"\"\"\n    return _load_stats(\"player\", seasons, summary_level)\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_team_stats","title":"nflreadpy.load_team_stats","text":"<pre><code>load_team_stats(\n    seasons: int | list[int] | bool | None = None,\n    summary_level: Literal[\n        \"week\", \"reg\", \"post\", \"reg+post\"\n    ] = \"week\",\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL team statistics.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data.     If int or list of ints, loads specified season(s).</p> <code>None</code> <code>summary_level</code> <code>Literal['week', 'reg', 'post', 'reg+post']</code> <p>Summary level (\"week\", \"reg\", \"post\", \"reg+post\").</p> <code>'week'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with team statistics.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_team_stats.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_team_stats.html</p> Source code in <code>src/nflreadpy/load_stats.py</code> <pre><code>def load_team_stats(\n    seasons: int | list[int] | bool | None = None,\n    summary_level: Literal[\"week\", \"reg\", \"post\", \"reg+post\"] = \"week\",\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL team statistics.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data.\n                If int or list of ints, loads specified season(s).\n        summary_level: Summary level (\"week\", \"reg\", \"post\", \"reg+post\").\n\n    Returns:\n        Polars DataFrame with team statistics.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_team_stats.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_team_stats.html&gt;\n    \"\"\"\n    return _load_stats(\"team\", seasons, summary_level)\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_schedules","title":"nflreadpy.load_schedules","text":"<p>Load NFL schedule data.</p>"},{"location":"api/load_functions/#nflreadpy.load_schedules.load_schedules","title":"load_schedules","text":"<pre><code>load_schedules(\n    seasons: int | list[int] | bool | None = True,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL schedules.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If True (default), loads all available data.     If int or list of ints, loads specified season(s).     If None, loads current season.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with schedule data.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_schedules.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_schedules.html</p> Source code in <code>src/nflreadpy/load_schedules.py</code> <pre><code>def load_schedules(seasons: int | list[int] | bool | None = True) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL schedules.\n\n    Args:\n        seasons: Season(s) to load. If True (default), loads all available data.\n                If int or list of ints, loads specified season(s).\n                If None, loads current season.\n\n    Returns:\n        Polars DataFrame with schedule data.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_schedules.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_schedules.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load the full games dataset\n    df = downloader.download(\"nflverse-data\", \"schedules/games\")\n\n    # Filter by seasons if specified\n    if seasons is not True:\n        if seasons is None:\n            seasons = [get_current_season()]\n        elif isinstance(seasons, int):\n            seasons = [seasons]\n\n        # Filter the dataframe by season\n        df = df.filter(pl.col(\"season\").is_in(seasons))\n\n    # Validate and clean roof values (matching nflreadr logic)\n    if \"roof\" in df.columns:\n        valid_roof_values = [\"dome\", \"outdoors\", \"closed\", \"open\"]\n        df = df.with_columns(\n            pl.when(pl.col(\"roof\").is_in(valid_roof_values))\n            .then(pl.col(\"roof\"))\n            .otherwise(None)\n            .alias(\"roof\")\n        )\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_teams","title":"nflreadpy.load_teams","text":"<p>Load NFL team data.</p>"},{"location":"api/load_functions/#nflreadpy.load_teams.load_teams","title":"load_teams","text":"<pre><code>load_teams() -&gt; pl.DataFrame\n</code></pre> <p>Load NFL team information.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with team data including abbreviations, names,        colors, logos, and other team metadata.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_teams.html</p> Source code in <code>src/nflreadpy/load_teams.py</code> <pre><code>def load_teams() -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL team information.\n\n    Returns:\n        Polars DataFrame with team data including abbreviations, names,\\\n        colors, logos, and other team metadata.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_teams.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load teams data from nflverse-data repository\n    df = downloader.download(\"nflverse-data\", \"teams/teams_colors_logos\")\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_players","title":"nflreadpy.load_players","text":"<p>Load NFL player data.</p>"},{"location":"api/load_functions/#nflreadpy.load_players.load_players","title":"load_players","text":"<pre><code>load_players() -&gt; pl.DataFrame\n</code></pre> <p>Load NFL player information.</p> <p>This is a comprehensive source of player information including basic details, draft information, positions, and ID mappings across multiple data sources (GSIS, PFR, PFF, OTC, ESB, ESPN).</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with player data - one row per player with comprehensive         player information including names, physical stats, draft info, and         cross-platform ID mappings.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_players.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_players.html</p> Source code in <code>src/nflreadpy/load_players.py</code> <pre><code>def load_players() -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL player information.\n\n    This is a comprehensive source of player information including basic details,\n    draft information, positions, and ID mappings across multiple data sources\n    (GSIS, PFR, PFF, OTC, ESB, ESPN).\n\n    Returns:\n        Polars DataFrame with player data - one row per player with comprehensive \\\n        player information including names, physical stats, draft info, and \\\n        cross-platform ID mappings.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_players.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_players.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load players data from nflverse-data repository\n    df = downloader.download(\"nflverse-data\", \"players/players\")\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_rosters","title":"nflreadpy.load_rosters","text":"<p>Load NFL roster data.</p>"},{"location":"api/load_functions/#nflreadpy.load_rosters.load_rosters","title":"load_rosters","text":"<pre><code>load_rosters(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL team rosters.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current roster year.     If True, loads all available data since 1920.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with roster data.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_rosters.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_rosters.html</p> Source code in <code>src/nflreadpy/load_rosters.py</code> <pre><code>def load_rosters(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL team rosters.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current roster year.\n                If True, loads all available data since 1920.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with roster data.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_rosters.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_rosters.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season(roster=True)]\n    elif seasons is True:\n        # Load all available seasons (1920 to current roster year)\n        current_roster_year = get_current_season(roster=True)\n        seasons = list(range(1920, current_roster_year + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_roster_year = get_current_season(roster=True)\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 1920 or season &gt; current_roster_year:\n            raise ValueError(f\"Season must be between 1920 and {current_roster_year}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"rosters/roster_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_rosters_weekly","title":"nflreadpy.load_rosters_weekly","text":"<p>Load NFL weekly rosters data.</p>"},{"location":"api/load_functions/#nflreadpy.load_rosters_weekly.load_rosters_weekly","title":"load_rosters_weekly","text":"<pre><code>load_rosters_weekly(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL weekly rosters data.</p> <p>Data available from 2002 onwards.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2002.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with weekly roster data including player status        changes, injury designations, and week-by-week roster moves.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_rosters_weekly.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_roster_status.html</p> Source code in <code>src/nflreadpy/load_rosters_weekly.py</code> <pre><code>def load_rosters_weekly(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL weekly rosters data.\n\n    Data available from 2002 onwards.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2002.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with weekly roster data including player status\\\n        changes, injury designations, and week-by-week roster moves.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_rosters_weekly.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_roster_status.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (2002 to current)\n        current_season = get_current_season()\n        seasons = list(range(2002, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2002 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2002 and {current_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"weekly_rosters/roster_weekly_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_snap_counts","title":"nflreadpy.load_snap_counts","text":"<p>Load NFL snap count data.</p>"},{"location":"api/load_functions/#nflreadpy.load_snap_counts.load_snap_counts","title":"load_snap_counts","text":"<pre><code>load_snap_counts(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL snap count data.</p> <p>Data sourced from Pro Football Reference, available since 2012.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2012.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with snap count data including player information,        offensive/defensive snaps, and snap percentages.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_snap_counts.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_snap_counts.html</p> Source code in <code>src/nflreadpy/load_snap_counts.py</code> <pre><code>def load_snap_counts(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL snap count data.\n\n    Data sourced from Pro Football Reference, available since 2012.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2012.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with snap count data including player information,\\\n        offensive/defensive snaps, and snap percentages.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_snap_counts.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_snap_counts.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (2012 to current)\n        current_season = get_current_season()\n        seasons = list(range(2012, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2012 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2012 and {current_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"snap_counts/snap_counts_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_nextgen_stats","title":"nflreadpy.load_nextgen_stats","text":"<p>Load NFL Next Gen Stats data.</p>"},{"location":"api/load_functions/#nflreadpy.load_nextgen_stats.load_nextgen_stats","title":"load_nextgen_stats","text":"<pre><code>load_nextgen_stats(\n    seasons: int | list[int] | bool | None = None,\n    stat_type: Literal[\n        \"passing\", \"receiving\", \"rushing\"\n    ] = \"passing\",\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL Next Gen Stats data.</p> <p>Data available since 2016.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2016.     If int or list of ints, loads specified season(s).</p> <code>None</code> <code>stat_type</code> <code>Literal['passing', 'receiving', 'rushing']</code> <p>Type of stats to load. Options: \"passing\", \"receiving\", \"rushing\".</p> <code>'passing'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with Next Gen Stats data including advanced metrics        for passing, receiving, or rushing performance.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_nextgen_stats.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_nextgen_stats.html</p> Source code in <code>src/nflreadpy/load_nextgen_stats.py</code> <pre><code>def load_nextgen_stats(\n    seasons: int | list[int] | bool | None = None,\n    stat_type: Literal[\"passing\", \"receiving\", \"rushing\"] = \"passing\",\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL Next Gen Stats data.\n\n    Data available since 2016.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2016.\n                If int or list of ints, loads specified season(s).\n        stat_type: Type of stats to load. Options: \"passing\", \"receiving\", \"rushing\".\n\n    Returns:\n        Polars DataFrame with Next Gen Stats data including advanced metrics\\\n        for passing, receiving, or rushing performance.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_nextgen_stats.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_nextgen_stats.html&gt;\n    \"\"\"\n    if stat_type not in [\"passing\", \"receiving\", \"rushing\"]:\n        raise ValueError(\"stat_type must be 'passing', 'receiving', or 'rushing'\")\n\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (2016 to current)\n        current_season = get_current_season()\n        seasons = list(range(2016, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2016 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2016 and {current_season}\")\n\n    downloader = get_downloader()\n\n    # Load the full dataset for the stat type\n    path = f\"nextgen_stats/ngs_{stat_type}\"\n    df = downloader.download(\"nflverse-data\", path, stat_type=stat_type)\n\n    # Filter by seasons\n    if \"season\" in df.columns:\n        df = df.filter(pl.col(\"season\").is_in(seasons))\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_ftn_charting","title":"nflreadpy.load_ftn_charting","text":"<p>Load FTN charting data.</p>"},{"location":"api/load_functions/#nflreadpy.load_ftn_charting.load_ftn_charting","title":"load_ftn_charting","text":"<pre><code>load_ftn_charting(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load FTN charting data.</p> <p>Data available since 2022.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2022.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with FTN charting data including detailed        play-by-play charting information and advanced metrics.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_ftn_charting.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_ftn_charting.html</p> Source code in <code>src/nflreadpy/load_ftn_charting.py</code> <pre><code>def load_ftn_charting(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load FTN charting data.\n\n    Data available since 2022.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2022.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with FTN charting data including detailed\\\n        play-by-play charting information and advanced metrics.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_ftn_charting.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_ftn_charting.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (2022 to current)\n        current_season = get_current_season()\n        seasons = list(range(2022, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2022 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2022 and {current_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"ftn_charting/ftn_charting_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_participation","title":"nflreadpy.load_participation","text":"<p>Load NFL participation data.</p>"},{"location":"api/load_functions/#nflreadpy.load_participation.load_participation","title":"load_participation","text":"<pre><code>load_participation(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL participation data.</p> <p>Data available since 2016.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2016.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with participation data including player involvement        on specific plays and snap participation details.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_participation.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_participation.html</p> Source code in <code>src/nflreadpy/load_participation.py</code> <pre><code>def load_participation(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL participation data.\n\n    Data available since 2016.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2016.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with participation data including player involvement\\\n        on specific plays and snap participation details.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_participation.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_participation.html&gt;\n    \"\"\"\n    # participation only available on a historical basis from FTN\n    max_season = get_current_season(roster=True) - 1\n    if seasons is None:\n        seasons = [max_season]\n    elif seasons is True:\n        # Load all available seasons (2016 to max_season)\n        seasons = list(range(2016, max_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2016 or season &gt; max_season:\n            raise ValueError(f\"Season must be between 2016 and {max_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"pbp_participation/pbp_participation_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_draft_picks","title":"nflreadpy.load_draft_picks","text":"<p>Load NFL draft pick data.</p>"},{"location":"api/load_functions/#nflreadpy.load_draft_picks.load_draft_picks","title":"load_draft_picks","text":"<pre><code>load_draft_picks(\n    seasons: int | list[int] | bool | None = True,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL draft pick data.</p> <p>Data covers draft picks since 1980, sourced from Pro Football Reference.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If True (default), loads all available data.     If int or list of ints, loads specified season(s).     If None, loads current season.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with draft pick data including draft year, round,        pick number, player information, and team data.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_draft_picks.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_draft_picks.html</p> Source code in <code>src/nflreadpy/load_draft_picks.py</code> <pre><code>def load_draft_picks(seasons: int | list[int] | bool | None = True) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL draft pick data.\n\n    Data covers draft picks since 1980, sourced from Pro Football Reference.\n\n    Args:\n        seasons: Season(s) to load. If True (default), loads all available data.\n                If int or list of ints, loads specified season(s).\n                If None, loads current season.\n\n    Returns:\n        Polars DataFrame with draft pick data including draft year, round,\\\n        pick number, player information, and team data.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_draft_picks.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_draft_picks.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load the full draft picks dataset\n    df = downloader.download(\"nflverse-data\", \"draft_picks/draft_picks\")\n\n    # Filter by seasons if specified\n    if seasons is not True:\n        if seasons is None:\n            seasons = [get_current_season()]\n        elif isinstance(seasons, int):\n            seasons = [seasons]\n\n        # Filter the dataframe by season\n        df = df.filter(pl.col(\"season\").is_in(seasons))\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_injuries","title":"nflreadpy.load_injuries","text":"<p>Load NFL injury data.</p>"},{"location":"api/load_functions/#nflreadpy.load_injuries.load_injuries","title":"load_injuries","text":"<pre><code>load_injuries(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL injury data.</p> <p>Data available since 2009.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2009.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with injury data including player information,        injury details, and status reports.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_injuries.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_injuries.html</p> Source code in <code>src/nflreadpy/load_injuries.py</code> <pre><code>def load_injuries(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL injury data.\n\n    Data available since 2009.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2009.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with injury data including player information,\\\n        injury details, and status reports.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_injuries.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_injuries.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (2009 to current)\n        current_season = get_current_season()\n        seasons = list(range(2009, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2009 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2009 and {current_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"injuries/injuries_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_contracts","title":"nflreadpy.load_contracts","text":"<p>Load NFL contract data.</p>"},{"location":"api/load_functions/#nflreadpy.load_contracts.load_contracts","title":"load_contracts","text":"<pre><code>load_contracts() -&gt; pl.DataFrame\n</code></pre> <p>Load NFL historical contract data.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with historical contract information including        player details, contract terms, values, and team information.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_contracts.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_contracts.html</p> Source code in <code>src/nflreadpy/load_contracts.py</code> <pre><code>def load_contracts() -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL historical contract data.\n\n    Returns:\n        Polars DataFrame with historical contract information including\\\n        player details, contract terms, values, and team information.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_contracts.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_contracts.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load historical contracts data from nflverse-data repository\n    df = downloader.download(\"nflverse-data\", \"contracts/historical_contracts\")\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_officials","title":"nflreadpy.load_officials","text":"<p>Load NFL officials data.</p>"},{"location":"api/load_functions/#nflreadpy.load_officials.load_officials","title":"load_officials","text":"<pre><code>load_officials(\n    seasons: int | list[int] | bool | None = True,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL officials data.</p> <p>Data covers NFL officials assigned to games from 2015 onwards.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If True (default), loads all available data.     If int or list of ints, loads specified season(s).     If None, loads current season.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with officials data including referee assignments,        crew information, and game details.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_officials.html</p> Source code in <code>src/nflreadpy/load_officials.py</code> <pre><code>def load_officials(seasons: int | list[int] | bool | None = True) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL officials data.\n\n    Data covers NFL officials assigned to games from 2015 onwards.\n\n    Args:\n        seasons: Season(s) to load. If True (default), loads all available data.\n                If int or list of ints, loads specified season(s).\n                If None, loads current season.\n\n    Returns:\n        Polars DataFrame with officials data including referee assignments,\\\n        crew information, and game details.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_officials.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load the full officials dataset\n    df = downloader.download(\"nflverse-data\", \"officials/officials\")\n\n    # Filter by seasons if specified\n    if seasons is not True:\n        if seasons is None:\n            seasons = [get_current_season()]\n        elif isinstance(seasons, int):\n            seasons = [seasons]\n\n        # Validate seasons (2015 minimum)\n        current_season = get_current_season()\n        for season in seasons:\n            if not isinstance(season, int) or season &lt; 2015 or season &gt; current_season:\n                raise ValueError(f\"Season must be between 2015 and {current_season}\")\n\n        # Filter the dataframe by season\n        if \"season\" in df.columns:\n            df = df.filter(pl.col(\"season\").is_in(seasons))\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_combine","title":"nflreadpy.load_combine","text":"<p>Load NFL Combine data.</p>"},{"location":"api/load_functions/#nflreadpy.load_combine.load_combine","title":"load_combine","text":"<pre><code>load_combine(\n    seasons: int | list[int] | bool | None = True,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL Combine data.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If True (default), loads all available data.     If int or list of ints, loads specified season(s).     If None, loads current season.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with NFL Combine data including player measurements,        test results (40-yard dash, bench press, etc.), and draft information.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_combine.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_combine.html</p> Source code in <code>src/nflreadpy/load_combine.py</code> <pre><code>def load_combine(seasons: int | list[int] | bool | None = True) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL Combine data.\n\n    Args:\n        seasons: Season(s) to load. If True (default), loads all available data.\n                If int or list of ints, loads specified season(s).\n                If None, loads current season.\n\n    Returns:\n        Polars DataFrame with NFL Combine data including player measurements,\\\n        test results (40-yard dash, bench press, etc.), and draft information.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_combine.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_combine.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Load the full combine dataset\n    df = downloader.download(\"nflverse-data\", \"combine/combine\")\n\n    # Filter by seasons if specified\n    if seasons is not True:\n        if seasons is None:\n            seasons = [get_current_season()]\n        elif isinstance(seasons, int):\n            seasons = [seasons]\n\n        # Filter the dataframe by season\n        if \"season\" in df.columns:\n            df = df.filter(pl.col(\"season\").is_in(seasons))\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_depth_charts","title":"nflreadpy.load_depth_charts","text":"<p>Load NFL depth charts data.</p>"},{"location":"api/load_functions/#nflreadpy.load_depth_charts.load_depth_charts","title":"load_depth_charts","text":"<pre><code>load_depth_charts(\n    seasons: int | list[int] | bool | None = None,\n) -&gt; pl.DataFrame\n</code></pre> <p>Load NFL depth charts data.</p> <p>Data available from 2001 onwards.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data since 2001.     If int or list of ints, loads specified season(s).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with depth charts data including player positions,        depth chart rankings, and team information.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_depth_charts.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_depth_charts.html</p> Source code in <code>src/nflreadpy/load_depth_charts.py</code> <pre><code>def load_depth_charts(seasons: int | list[int] | bool | None = None) -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL depth charts data.\n\n    Data available from 2001 onwards.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data since 2001.\n                If int or list of ints, loads specified season(s).\n\n    Returns:\n        Polars DataFrame with depth charts data including player positions,\\\n        depth chart rankings, and team information.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_depth_charts.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_depth_charts.html&gt;\n    \"\"\"\n    if seasons is None:\n        seasons = [get_current_season(roster=True)]\n    elif seasons is True:\n        # Load all available seasons (2001 to current)\n        current_season = get_current_season(roster=True)\n        seasons = list(range(2001, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season(roster=True)\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2001 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2001 and {current_season}\")\n\n    downloader = get_downloader()\n    dataframes = []\n\n    for season in seasons:\n        path = f\"depth_charts/depth_charts_{season}\"\n        df = downloader.download(\"nflverse-data\", path, season=season)\n        dataframes.append(df)\n\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_trades","title":"nflreadpy.load_trades","text":"<p>Load NFL trades data.</p>"},{"location":"api/load_functions/#nflreadpy.load_trades.load_trades","title":"load_trades","text":"<pre><code>load_trades() -&gt; pl.DataFrame\n</code></pre> <p>Load NFL trades data.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with NFL trade information including players,        teams, draft picks, and trade details.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_trades.html</p> Data Dictionary <p>https://nflreadr.nflverse.com/articles/dictionary_trades.html</p> Source code in <code>src/nflreadpy/load_trades.py</code> <pre><code>def load_trades() -&gt; pl.DataFrame:\n    \"\"\"\n    Load NFL trades data.\n\n    Returns:\n        Polars DataFrame with NFL trade information including players,\\\n        teams, draft picks, and trade details.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_trades.html&gt;\n\n    Data Dictionary:\n        &lt;https://nflreadr.nflverse.com/articles/dictionary_trades.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    df = downloader.download(\"nflverse-data\", \"trades/trades\")\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_pfr_advstats","title":"nflreadpy.load_pfr_advstats","text":"<p>Load Pro Football Reference advanced statistics.</p>"},{"location":"api/load_functions/#nflreadpy.load_pfr_advstats.load_pfr_advstats","title":"load_pfr_advstats","text":"<pre><code>load_pfr_advstats(\n    seasons: int | list[int] | bool | None = None,\n    stat_type: Literal[\n        \"pass\", \"rush\", \"rec\", \"def\"\n    ] = \"pass\",\n    summary_level: Literal[\"week\", \"season\"] = \"week\",\n) -&gt; pl.DataFrame\n</code></pre> <p>Load Pro Football Reference advanced statistics.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | bool | None</code> <p>Season(s) to load. If None, loads current season.     If True, loads all available data (2018-current).     If int or list of ints, loads specified season(s).     Only used when summary_level=\"week\".</p> <code>None</code> <code>stat_type</code> <code>Literal['pass', 'rush', 'rec', 'def']</code> <p>Type of statistics to load:       - \"pass\": Passing statistics       - \"rush\": Rushing statistics       - \"rec\": Receiving statistics       - \"def\": Defensive statistics</p> <code>'pass'</code> <code>summary_level</code> <code>Literal['week', 'season']</code> <p>Summary level:           - \"week\": Weekly statistics by season           - \"season\": Season-level statistics (all seasons combined)</p> <code>'week'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with Pro Football Reference advanced statistics.</p> Note <p>Data is available from 2018 onwards.</p> See Also <ul> <li>nflreadr docs</li> <li>example of advanced passing season-level stats</li> <li>example of advanced passing week-level stats</li> </ul> Source code in <code>src/nflreadpy/load_pfr_advstats.py</code> <pre><code>def load_pfr_advstats(\n    seasons: int | list[int] | bool | None = None,\n    stat_type: Literal[\"pass\", \"rush\", \"rec\", \"def\"] = \"pass\",\n    summary_level: Literal[\"week\", \"season\"] = \"week\",\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Load Pro Football Reference advanced statistics.\n\n    Args:\n        seasons: Season(s) to load. If None, loads current season.\n                If True, loads all available data (2018-current).\n                If int or list of ints, loads specified season(s).\n                Only used when summary_level=\"week\".\n        stat_type: Type of statistics to load:\n                  - \"pass\": Passing statistics\n                  - \"rush\": Rushing statistics\n                  - \"rec\": Receiving statistics\n                  - \"def\": Defensive statistics\n        summary_level: Summary level:\n                      - \"week\": Weekly statistics by season\n                      - \"season\": Season-level statistics (all seasons combined)\n\n    Returns:\n        Polars DataFrame with Pro Football Reference advanced statistics.\n\n    Note:\n        Data is available from 2018 onwards.\n\n    See Also:\n       - [nflreadr docs](https://nflreadr.nflverse.com/reference/load_pfr_advstats.html)\n       - [example of advanced passing season-level stats](https://www.pro-football-reference.com/years/2025/passing_advanced.htm)\n       - [example of advanced passing week-level stats](https://www.pro-football-reference.com/boxscores/202509040phi.htm#all_passing_advanced)\n\n    \"\"\"\n    # Validate stat_type\n    if stat_type not in [\"pass\", \"rush\", \"rec\", \"def\"]:\n        raise ValueError(\"stat_type must be 'pass', 'rush', 'rec', or 'def'\")\n\n    # Validate summary_level\n    if summary_level not in [\"week\", \"season\"]:\n        raise ValueError(\"summary_level must be 'week' or 'season'\")\n\n    # Handle seasons parameter\n    if seasons is None:\n        seasons = [get_current_season()]\n    elif seasons is True:\n        # Load all available seasons (2018-current)\n        current_season = get_current_season()\n        seasons = list(range(2018, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate seasons\n    current_season = get_current_season()\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; 2018 or season &gt; current_season:\n            raise ValueError(f\"Season must be between 2018 and {current_season}\")\n\n    if summary_level == \"season\":\n        return _load_pfr_advstats_season(seasons, stat_type)\n    else:\n        return _load_pfr_advstats_week(seasons, stat_type)\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_ff_playerids","title":"nflreadpy.load_ff_playerids","text":"<pre><code>load_ff_playerids() -&gt; pl.DataFrame\n</code></pre> <p>Load fantasy football player IDs from DynastyProcess.com database.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with comprehensive player ID mappings across platforms.</p> Note <p>This function loads data from an R data file (.rds). While Python cannot directly read RDS files, we attempt to use CSV format if available.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_ff_playerids.html</p> Source code in <code>src/nflreadpy/load_ffverse.py</code> <pre><code>def load_ff_playerids() -&gt; pl.DataFrame:\n    \"\"\"\n    Load fantasy football player IDs from DynastyProcess.com database.\n\n    Returns:\n        Polars DataFrame with comprehensive player ID mappings across platforms.\n\n    Note:\n        This function loads data from an R data file (.rds). While Python cannot\n        directly read RDS files, we attempt to use CSV format if available.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_ff_playerids.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    df = downloader.download(\"dynastyprocess\", \"db_playerids\", format=DataFormat.CSV)\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_ff_rankings","title":"nflreadpy.load_ff_rankings","text":"<pre><code>load_ff_rankings(\n    type: Literal[\"draft\", \"week\", \"all\"] = \"draft\",\n) -&gt; pl.DataFrame\n</code></pre> <p>Load fantasy football rankings and projections.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['draft', 'week', 'all']</code> <p>Type of rankings to load: - \"draft\": Draft rankings/projections - \"week\": Weekly rankings/projections - \"all\": All historical rankings/projections</p> <code>'draft'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with fantasy football rankings data.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_ff_rankings.html</p> Source code in <code>src/nflreadpy/load_ffverse.py</code> <pre><code>def load_ff_rankings(type: Literal[\"draft\", \"week\", \"all\"] = \"draft\") -&gt; pl.DataFrame:\n    \"\"\"\n    Load fantasy football rankings and projections.\n\n    Args:\n        type: Type of rankings to load:\n            - \"draft\": Draft rankings/projections\n            - \"week\": Weekly rankings/projections\n            - \"all\": All historical rankings/projections\n\n    Returns:\n        Polars DataFrame with fantasy football rankings data.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_ff_rankings.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Map ranking types to file names\n    file_mapping = {\n        \"draft\": \"db_fpecr_latest\",\n        \"week\": \"fp_latest_weekly\",\n        \"all\": \"db_fpecr\",\n    }\n\n    if type not in file_mapping:\n        raise ValueError(f\"Invalid type '{type}'. Must be one of: draft, week, all\")\n\n    filename = file_mapping[type]\n\n    if type == \"all\":\n        df = downloader.download(\"dynastyprocess\", filename)\n    else:\n        df = downloader.download(\"dynastyprocess\", filename, format=DataFormat.CSV)\n\n    return df\n</code></pre>"},{"location":"api/load_functions/#nflreadpy.load_ff_opportunity","title":"nflreadpy.load_ff_opportunity","text":"<pre><code>load_ff_opportunity(\n    seasons: int | list[int] | None = None,\n    stat_type: Literal[\n        \"weekly\", \"pbp_pass\", \"pbp_rush\"\n    ] = \"weekly\",\n    model_version: Literal[\"latest\", \"v1.0.0\"] = \"latest\",\n) -&gt; pl.DataFrame\n</code></pre> <p>Load fantasy football opportunity data.</p> <p>This function loads opportunity and target share data for fantasy football analysis from the ffverse/ffopportunity repository.</p> <p>Parameters:</p> Name Type Description Default <code>seasons</code> <code>int | list[int] | None</code> <p>Season(s) to load. If None (default), loads current season.     If int or list of ints, loads specified season(s). True loads all seasons.</p> <code>None</code> <code>stat_type</code> <code>Literal['weekly', 'pbp_pass', 'pbp_rush']</code> <p>Type of stats to load: - \"weekly\": Weekly opportunity data - \"pbp_pass\": Play-by-play passing data - \"pbp_rush\": Play-by-play rushing data</p> <code>'weekly'</code> <code>model_version</code> <code>Literal['latest', 'v1.0.0']</code> <p>Model version to load: - \"latest\": Most recent model version - \"v1.0.0\": Specific model version</p> <code>'latest'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Polars DataFrame with fantasy football opportunity data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If season is outside valid range or invalid parameters provided.</p> See Also <p>https://nflreadr.nflverse.com/reference/load_ff_opportunity.html</p> Source code in <code>src/nflreadpy/load_ffverse.py</code> <pre><code>def load_ff_opportunity(\n    seasons: int | list[int] | None = None,\n    stat_type: Literal[\"weekly\", \"pbp_pass\", \"pbp_rush\"] = \"weekly\",\n    model_version: Literal[\"latest\", \"v1.0.0\"] = \"latest\",\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Load fantasy football opportunity data.\n\n    This function loads opportunity and target share data for fantasy football\n    analysis from the ffverse/ffopportunity repository.\n\n    Args:\n        seasons: Season(s) to load. If None (default), loads current season.\n                If int or list of ints, loads specified season(s). True loads all seasons.\n        stat_type: Type of stats to load:\n            - \"weekly\": Weekly opportunity data\n            - \"pbp_pass\": Play-by-play passing data\n            - \"pbp_rush\": Play-by-play rushing data\n        model_version: Model version to load:\n            - \"latest\": Most recent model version\n            - \"v1.0.0\": Specific model version\n\n    Returns:\n        Polars DataFrame with fantasy football opportunity data.\n\n    Raises:\n        ValueError: If season is outside valid range or invalid parameters provided.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/load_ff_opportunity.html&gt;\n    \"\"\"\n    downloader = get_downloader()\n\n    # Validate parameters\n    valid_stat_types = [\"weekly\", \"pbp_pass\", \"pbp_rush\"]\n    if stat_type not in valid_stat_types:\n        raise ValueError(\n            f\"Invalid stat_type '{stat_type}'. Must be one of: {valid_stat_types}\"\n        )\n\n    valid_versions = [\"latest\", \"v1.0.0\"]\n    if model_version not in valid_versions:\n        raise ValueError(\n            f\"Invalid model_version '{model_version}'. Must be one of: {valid_versions}\"\n        )\n\n    min_year = 2006\n    current_season = get_current_season()\n    # Handle seasons parameter\n    if seasons is None:\n        seasons = [current_season]\n    elif seasons is True:\n        # Load all available seasons (min_year to current)\n        current_season = get_current_season()\n        seasons = list(range(min_year, current_season + 1))\n    elif isinstance(seasons, int):\n        seasons = [seasons]\n\n    # Validate season range\n    for season in seasons:\n        if not isinstance(season, int) or season &lt; min_year or season &gt; current_season:\n            raise ValueError(f\"Season must be between {min_year} and {current_season}\")\n\n    # Load data for each season\n    dataframes = []\n    for season in seasons:\n        # Build the release tag and filename based on the R implementation\n        release_tag = f\"{model_version}-data\"\n        filename = f\"ep_{stat_type}_{season}\"\n\n        # Build the path for the ffopportunity repository\n        path = f\"{release_tag}/{filename}\"\n\n        df = downloader.download(\"ffopportunity\", path)\n\n        dataframes.append(df)\n\n    # Combine all seasons\n    if len(dataframes) == 1:\n        return dataframes[0]\n    else:\n        return pl.concat(dataframes, how=\"diagonal_relaxed\")\n</code></pre>"},{"location":"api/utils/","title":"Utilities","text":""},{"location":"api/utils/#nflreadpy.get_current_season","title":"nflreadpy.get_current_season","text":"<pre><code>get_current_season(roster: bool = False) -&gt; int\n</code></pre> <p>Get the current NFL season year.</p> <p>Parameters:</p> Name Type Description Default <code>roster</code> <code>bool</code> <ul> <li>If True, uses roster year logic (current year after March 15).</li> <li>If False, uses season logic (current year after Thursday following Labor Day).</li> </ul> <code>False</code> <p>Returns:</p> Type Description <code>int</code> <p>The current season/roster year.</p> See Also <p>https://nflreadr.nflverse.com/reference/get_current_season.html</p> Source code in <code>src/nflreadpy/utils_date.py</code> <pre><code>def get_current_season(roster: bool = False) -&gt; int:\n    \"\"\"\n    Get the current NFL season year.\n\n    Args:\n        roster:\n            - If True, uses roster year logic (current year after March 15).\n            - If False, uses season logic (current year after Thursday following Labor Day).\n\n    Returns:\n        The current season/roster year.\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/get_current_season.html&gt;\n    \"\"\"\n    today = date.today()\n    current_year = today.year\n\n    if roster:\n        # Roster logic: current year after March 15, otherwise previous year\n        march_15 = date(current_year, 3, 15)\n        return current_year if today &gt;= march_15 else current_year - 1\n    else:\n        # Season logic: current year after Thursday following Labor Day\n        # Labor Day is first Monday in September\n        # Find first Monday in September\n        for day in range(1, 8):\n            if date(current_year, 9, day).weekday() == 0:  # Monday\n                labor_day = date(current_year, 9, day)\n                break\n\n        # Thursday following Labor Day\n        season_start = date(labor_day.year, labor_day.month, labor_day.day + 3)\n        return current_year if today &gt;= season_start else current_year - 1\n</code></pre>"},{"location":"api/utils/#nflreadpy.get_current_week","title":"nflreadpy.get_current_week","text":"<pre><code>get_current_week() -&gt; int\n</code></pre> <p>Get the current NFL week (rough approximation).</p> <p>Returns:</p> Type Description <code>int</code> <p>The current NFL week (1-22).</p> See Also <p>https://nflreadr.nflverse.com/reference/get_current_week.html</p> Source code in <code>src/nflreadpy/utils_date.py</code> <pre><code>def get_current_week() -&gt; int:\n    \"\"\"\n    Get the current NFL week (rough approximation).\n\n    Returns:\n        The current NFL week (1-22).\n\n    See Also:\n        &lt;https://nflreadr.nflverse.com/reference/get_current_week.html&gt;\n    \"\"\"\n    today = date.today()\n    season_year = get_current_season()\n\n    # NFL season typically starts around first Thursday of September\n    # Find first Thursday in September\n    for day in range(1, 8):\n        if date(season_year, 9, day).weekday() == 3:  # Thursday\n            season_start = date(season_year, 9, day)\n            break\n\n    if today &lt; season_start:\n        return 1\n\n    # Calculate weeks since season start\n    days_since_start = (today - season_start).days\n    week = min(days_since_start // 7 + 1, 22)  # Cap at week 22\n\n    return int(week)\n</code></pre>"}]}