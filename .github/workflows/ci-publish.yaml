# Workflow derived from https://docs.astral.sh/uv/guides/integration/github/

on:
  release:
    types: [published]
  workflow_dispatch:

name: Publish package to PyPI

jobs:
  ci-publish:
    runs-on: ubuntu-latest

    name: Upload to PyPI

    env:
      UV_PYTHON: "3.10"

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: "0.8.17"

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run build
        run: uv build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  docker-images:
    name: Build and publish container images
    runs-on: ubuntu-latest
    needs: ci-publish
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image metadata
        id: meta
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          IMAGE="ghcr.io/$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Build and push CPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.cpu
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version }}-cpu
            ${{ steps.meta.outputs.image }}:latest-cpu

      - name: Build and push GPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.gpu
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version }}-gpu
            ${{ steps.meta.outputs.image }}:latest-gpu
